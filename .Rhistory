filter(is_submitter == TRUE) %>%
rename(c("sex" = "submitter_sex")) %>%
rename(c("age" = "submitter_age"))
app_outcome_countm_sub <- app_outcome_countm %>%
left_join(demo_submitter, by="application_id")
tbl_df(app_outcome_countm_sub)
# Get average age of all members in each application,and merge to applications, members, etc.
member_avg_age <- members %>%
select(application_id, age) %>%
group_by(application_id) %>%
summarise_all(funs(mean)) %>%
rename(c("age" = "avg_age"))
app_outcome_countm_sub_avg_age <- app_outcome_countm_sub %>%
left_join(member_avg_age, by="application_id")
app_outcome_countm_sub_avg_age$status_num <- as.factor(app_outcome_countm_sub_avg_age$status_num)
app_outcome_countm_sub_avg_age$submitter_age <- as.numeric(app_outcome_countm_sub_avg_age$submitter_age)
str(app_outcome_countm_sub_avg_age)
## RENAME DATASET FOR EASE OF USE LATER ON
df1 <- app_outcome_countm_sub_avg_age
rm(list = ls())
library(dplyr)
library(knitr)
library(ggplot2)
library(scales)
applications <- read.csv("/Users/nadinekhattak/Downloads/snap/applications.csv")
members <- read.csv("/Users/nadinekhattak/Downloads/snap/members.csv")
outcomes <- read.csv("/Users/nadinekhattak/Downloads/snap/outcomes.csv")
app_outcome <- applications %>%
rename(c("id" = "application_id")) %>%
left_join(outcomes, by="application_id") %>%
mutate(subscribed_to_reminders = as.factor(subscribed_to_reminders)) %>%
mutate(status_num = ifelse(status == "approved", 1, 0))
count_members <- as.data.frame(table(members$application_id, members$sex, useNA="always")) %>%
rename(c("Var1" = "application_id")) %>%
rename(c("Var2" = "gender")) %>%
mutate(application_id = as.integer(as.character(application_id)))
count_members1 <- dcast(count_members, application_id ~ gender, value.var="Freq", fun.aggregate = sum)
app_outcome_countm <- app_outcome %>%
full_join(count_members1, by="application_id") %>%
filter(!is.na(application_id)) %>%
select(-`NA`) %>%
mutate(total_members = Female + Male)
app_outcome_countm$total_members[is.na(app_outcome_countm$total_members)] <- 0
demo_submitter <- members %>%
filter(is_submitter == TRUE) %>%
rename(c("sex" = "submitter_sex")) %>%
rename(c("age" = "submitter_age"))
app_outcome_countm_sub <- app_outcome_countm %>%
left_join(demo_submitter, by="application_id")
tbl_df(app_outcome_countm_sub)
member_avg_age <- members %>%
select(application_id, age) %>%
group_by(application_id) %>%
summarise_all(funs(mean)) %>%
rename(c("age" = "avg_age"))
app_outcome_countm_sub_avg_age <- app_outcome_countm_sub %>%
left_join(member_avg_age, by="application_id")
app_outcome_countm_sub_avg_age$status_num <- as.factor(app_outcome_countm_sub_avg_age$status_num)
app_outcome_countm_sub_avg_age$submitter_age <- as.numeric(app_outcome_countm_sub_avg_age$submitter_age)
str(app_outcome_countm_sub_avg_age)
df1 <- app_outcome_countm_sub_avg_age
submitter_age_model <- glm(status_num ~ submitter_age, data=df1, family="binomial")
num_docs_model <- glm(status_num ~ uploaded_documents, data=df1, family="binomial")
library(plyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(scales)
library(plyr)
library(reshape2)
subscribed_rem <- as.data.frame(table(df1$subscribed_to_reminders, df1$status)) %>%
rename(c("Var1" = "subscr_reminders")) %>%
rename(c("Var2" = "status"))
g_subscribed_rem <- ggplot(data=subscribed_rem, aes(x=subscr_reminders, y=Freq, fill=status)) +
geom_bar(stat="identity", position=position_dodge(), colour="black")
subscribed_rem_wide <- dcast(subscribed_rem, subscr_reminders ~ status, value.var="Freq")
subscribed_rem_wide$total <- subscribed_rem_wide$approved + subscribed_rem_wide$denied
subscribed_rem_wide$perc_approved <- round(subscribed_rem_wide$approved/subscribed_rem_wide$total,2)
subscribed_rem_wide$perc_subsc_total <- round((subscribed_rem_wide$approved + subscribed_rem_wide$denied) / sum(subscribed_rem_wide$total),2)
subscribed_rem_wide
require(httr)
api_key <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
path <- "https://api.propublica.org/campaign-finance/v1/2016/president/totals.json"
data <- GET(path, add_headers("X-API-Key", .headers = api_key))
content(data)
path <- "https://api.propublica.org/congress/v1/"
data <- GET(path, add_headers("X-API-Key", .headers = api_key))
content(data)
require(httr)
api_key <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
path <- "https://api.propublica.org/congress/v1/"
data <- GET(path, add_headers("X-API-Key", .headers = api_key))
content(data)
api_key <- jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe
req <- GET("https://api.propublica.org/campaign-finance/v1/2016/president/totals.json",
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = api_key))
stop_for_status(req)
content(req)
req <- GET("https://api.propublica.org/congress/v1.json",
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = api_key))
stop_for_status(req)
req <- GET("https://api.propublica.org/congress/v1",
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = api_key))
stop_for_status(req)
content(req)
api_key <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
path <- "https://api.propublica.org/campaign-finance/v1/2016/president/totals.json"
req <- fromJSON(paste0(path, api_key))
library(jsonlite)
req <- fromJSON(paste0(path, api_key))
path <- "https://api.propublica.org/congress/v1"
req <- fromJSON(paste0(path, api_key))
api_key <- "&X-API-Key=jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
req <- fromJSON(paste0(path, api_key))
path <- "https://api.propublica.org/congress/v1"
req <- fromJSON(paste0(path, api_key))
path <- "https://api.propublica.org/congress/v1/"
req <- fromJSON(paste0(path, api_key))
GET("https://api.propublica.org/congress/v1.json?X_API_Key=jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe“)
req <- GET("https://api.propublica.org/congress/v1",
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = api_key))
stop_for_status(req)
content(req)
GET("https://api.propublica.org/congress/v1.json?X-API-Key=jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe“)
req <- GET("https://api.propublica.org/congress/v1",
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = api_key))
stop_for_status(req)
content(req)
GET("https://api.propublica.org/congress/v1.json?API_Key=jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe“)
req <- GET("https://api.propublica.org/congress/v1",
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = api_key))
stop_for_status(req)
content(req)
GET("https://api.propublica.org/congress/v1.json?api_key=jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe“)
req <- GET("https://api.propublica.org/congress/v1",
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = api_key))
stop_for_status(req)
content(req)
GET("https://api.propublica.org/congress/v1.json?api_key=jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe")
path <- "https://api.propublica.org/congress/v1?"
api_key <- "&X-API-Key=jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
data <- GET(path, add_headers("X-API-Key", .headers = api_key))
content(data)
api_key <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
path <- "https://api.propublica.org/congress/v1?"
data <- GET(path, add_headers("X-API-Key", .headers = api_key))
content(data)
api_key <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
path <- "https://api.propublica.org/congress/v1"
data <- GET(path, add_headers("X-API-Key", .headers = api_key))
content(data)
api_key <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
path <- "https://api.propublica.org/congress/v1/?"
data <- GET(path, add_headers("X-API-Key", .headers = api_key))
content(data)
library(curlconverter)
install.package('curlconverter')
install.packages('curlconverter')
library(curlconverter)
install.packages('curlconverter')
library(curlconverter)
library(curlconverter)
install.packages('curlconverter')
installr
install.packages('curlconverter')
library(curlconverter)
install.package('curlconverter')
install.packages('curlconverter')
devtools::install_github("hrbrmstr/curlconverter"
devtools::install_github("hrbrmstr/curlconverter")
devtools::install_github("hrbrmstr/curlconverter")
library(RCurl)
install.packages("RCurl")
library(RCurl)
param3 <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
library(RCurl)
param3 <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
webobj <- postForm("https://api.propublica.org/congress/v1/bills/subjects/taxation.json",token=param3)
webobj <- postForm("https://api.propublica.org/congress/v1/bills/subjects/taxation.json",X-API-Key=param3)
webobj <- postForm("https://api.propublica.org/congress/v1/bills/subjects/taxation.json",'X-API-Key'=param3)
webobj <- GET("https://api.propublica.org/congress/v1/bills/subjects/taxation.json", query = list(api_key = param3))
library(httr)
install.packaages("httr")
install.packages("httr")
library(httr)
param3 <- "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
webobj <- GET("https://api.propublica.org/congress/v1/bills/subjects/taxation.json", query = list(api_key = param3))
str(webobj)
webobj_data <- content(webobj)
names(webobj_data)
names(webobj_data$results[[1]])
webobj$content
names(webobj$content)
library(httr)
library(stringr)
library(dplyr)
options(stringsAsFactors = FALSE)
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(plyr))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(dplyr))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(ggplot2))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(ggthemes))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(scales))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(lubridate))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(xml2))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(rjson))))
suppressMessages(suppressWarnings(suppressPackageStartupMessages(library(httr))))
getBills <- function(congress,branch,type,numFrom, numTo) {
get_url <- paste('https://api.propublica.org/congress/v1/',congress, '/',branch,'/bills/',type,'.json', sep="" )
api_key = "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe"
listofdfs <- list()
x=c()
first_20 <-  GET(get_url,
add_headers(`X-API-Key` = api_key))
ft_pr <- content(first_20, 'parsed')
ft_res1 <- ft_pr$results
ft_res2 <- ft_res1[[1]]
ft_res3 <- ft_res2$bills
ft_res4 <- data.frame(do.call(rbind, ft_res3), stringsAsFactors=FALSE)
for(i in numFrom:numTo) {
if ((i %% 20) ==0) {
url <- paste(get_url,'?offset=', i,sep="")
r <- GET(url,
add_headers(`X-API-Key` = api_key))
pr <- content(r, 'parsed')
t1 <- pr$results
t2 <- t1[[1]]
t3 <- t2$bills
listofdfs[[i]] <- t3
df_name <- paste("df", i, sep="_")
assign(df_name,listofdfs[[i]])
df1_name <- paste("df1", i, sep="_")
assign(df1_name, data.frame(do.call(rbind, listofdfs[[i]]), stringsAsFactors=FALSE))
x=append(x,df1_name)
}
}
x1 <- do.call(rbind, mget(x))
x2 <- rbind(ft_res4,x1)
x3 <- lapply(x2, function(x) ifelse(x=="NULL", NA, x))
x4 <- lapply(x3, function(x) as.character((unlist(x))))
x5 <- as.data.frame(do.call(cbind, x4))
return(x5)
}
h_enact_112 <- getBills("112", "house","introduced",1,8000 )
h_enact_112 <- getBills("112", "house","introduced",1,8000 )
h_enact_112 <- getBills("112", "house","introduced",1,8000 )
test <- GET("https://api.propublica.org/congress/v1/112/bills/hr7.json",
add_headers(`X-API-Key` = 'jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe'))
ft_pr <- content(test, "parsed")
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("parent_directory")
create("cats")
setwd("./cats")
document()
setwd("..")
install("cats")
?cats
?cat_function
getwd()
setwd(./cats)
setwd("./cats")
getwd()
library(devtools)
if (interactive()) {
suppressMessages(require(devtools))
}
create("~/tmp/foofactors")
create("~/tmp/foofactors")
setwd('/Users/nadinekhattak/Desktop')
create("~/tmp/foofactors")
create("/tmp/foofactors")
cbind(listing_1 <- list.files(all.files = TRUE, no.. = TRUE))
setwd('./tmp')
cbind(listing_1 <- list.files(all.files = TRUE, no.. = TRUE))
?cat_function
setwd("..")
install("cats")
rJava:: jpackage
Sys.which(pdflatex)
Sys.which("pdflatex")
library(devtools)
install_github("nadines/proPubBills")
install.packages("proPubBills")
install.packages("proPubBills")
library(proPubBills)
h_enact_112 <- getBills("112", "house","introduced",1,8000 )
install.packages("proPubBills")
install.packages("proPubBills")
install.packages("proPubBills")
?getBills()
getBills()
document()
library(roxygen2)
library(devtools)
library(httr)
library(stringr)
library(dplyr)
document()
getwd()
setwd("/Users/nadinekhattak/Desktop/proPubBills")
document()
build()
Sys.setenv("key" = "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe")
Sys.getenv('key')
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(dplyr)
library(stringr)
getBills <- function(key,congress,branch,type,numFrom, numTo) {
get_url <- paste('https://api.propublica.org/congress/v1/',congress, '/',branch,'/bills/',type,'.json', sep="" )
listofdfs <- list()
x=c()
first_20 <-  GET(get_url,
add_headers(`X-API-Key` = key))
ft_pr <- content(first_20, 'parsed')
ft_res1 <- ft_pr$results
ft_res2 <- ft_res1[[1]]
ft_res3 <- ft_res2$bills
ft_res4 <- data.frame(do.call(rbind, ft_res3), stringsAsFactors=FALSE)
for(i in numFrom:numTo) {
if ((i %% 20) ==0) {
url <- paste(get_url,'?offset=', i,sep="")
r <- GET(url,
add_headers(`X-API-Key` = key))
pr <- content(r, 'parsed')
t1 <- pr$results
t2 <- t1[[1]]
t3 <- t2$bills
listofdfs[[i]] <- t3
df_name <- paste("df", i, sep="_")
assign(df_name,listofdfs[[i]])
df1_name <- paste("df1", i, sep="_")
assign(df1_name, data.frame(do.call(rbind, listofdfs[[i]]), stringsAsFactors=FALSE))
x=append(x,df1_name)
}
}
x1 <- do.call(rbind, mget(x))
x2 <- rbind(ft_res4,x1)
x3 <- lapply(x2, function(x) ifelse(x=="NULL", NA, x))
x4 <- lapply(x3, function(x) as.character((unlist(x))))
x5 <- as.data.frame(do.call(cbind, x4))
return(x5)
}
api_key <- Sys.getenv('key')
house_enacted_115 <- getBills(api_key,"115","house", "enacted",1,20)
str(house_enacted_115)
house_enacted_115_1 <- house_enacted_115 %>%
mutate(dup = duplicated(bill_id)) %>%
filter(dup==FALSE)
str(house_enacted_115)
build()
document()
build()
build()
document()
build()
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(dplyr)
library(stringr)
getBills <- function(key,congress,branch,type,numFrom, numTo) {
get_url <- paste('https://api.propublica.org/congress/v1/',congress, '/',branch,'/bills/',type,'.json', sep="" )
listofdfs <- list()
x=c()
first_20 <-  GET(get_url,
add_headers(`X-API-Key` = key))
ft_pr <- content(first_20, 'parsed')
ft_res1 <- ft_pr$results
ft_res2 <- ft_res1[[1]]
ft_res3 <- ft_res2$bills
ft_res4 <- data.frame(do.call(rbind, ft_res3), stringsAsFactors=FALSE)
for(i in numFrom:numTo) {
if ((i %% 20) ==0) {
url <- paste(get_url,'?offset=', i,sep="")
r <- GET(url,
add_headers(`X-API-Key` = key))
pr <- content(r, 'parsed')
t1 <- pr$results
t2 <- t1[[1]]
t3 <- t2$bills
listofdfs[[i]] <- t3
df_name <- paste("df", i, sep="_")
assign(df_name,listofdfs[[i]])
df1_name <- paste("df1", i, sep="_")
assign(df1_name, data.frame(do.call(rbind, listofdfs[[i]]), stringsAsFactors=FALSE))
x=append(x,df1_name)
}
}
x1 <- do.call(rbind, mget(x))
x2 <- rbind(ft_res4,x1)
x3 <- lapply(x2, function(x) ifelse(x=="NULL", NA, x))
x4 <- lapply(x3, function(x) as.character((unlist(x))))
x5 <- as.data.frame(do.call(cbind, x4))
return(x5)
}
api_key <- Sys.getenv('key')
house_enacted_115 <- getBills(api_key,"115","house", "enacted",1,20)
str(house_enacted_115)
house_enacted_115_1 <- house_enacted_115 %>%
mutate(dup = duplicated(bill_id)) %>%
filter(dup==FALSE)
str(house_enacted_115)
house_enacted_115_party <- as.data.frame(table(house_enacted_115$sponsor_party, house_enacted_115$bill_type)) %>%
mutate(chamber = ifelse(str_detect(Var2, "^h"),"H","S"))  %>%
select(-Var2, -chamber)  %>%
group_by(Var1) %>%
summarise_all(funs(sum))
house_enacted_115_party
build()
build()
getBills <- function(key,congress,branch,type,numFrom, numTo) {
get_url <- paste('https://api.propublica.org/congress/v1/',congress, '/',branch,'/bills/',type,'.json', sep="" )
listofdfs <- list()
x=c()
first_20 <-  GET(get_url,
add_headers(`X-API-Key` = key))
ft_pr <- content(first_20, 'parsed')
ft_res1 <- ft_pr$results
ft_res2 <- ft_res1[[1]]
ft_res3 <- ft_res2$bills
ft_res4 <- data.frame(do.call(rbind, ft_res3), stringsAsFactors=FALSE)
for(i in numFrom:numTo) {
if ((i %% 20) ==0) {
url <- paste(get_url,'?offset=', i,sep="")
r <- GET(url,
add_headers(`X-API-Key` = key))
pr <- content(r, 'parsed')
t1 <- pr$results
t2 <- t1[[1]]
t3 <- t2$bills
listofdfs[[i]] <- t3
df_name <- paste("df", i, sep="_")
assign(df_name,listofdfs[[i]])
df1_name <- paste("df1", i, sep="_")
assign(df1_name, data.frame(do.call(rbind, listofdfs[[i]]), stringsAsFactors=FALSE))
x=append(x,df1_name)
}
}
x1 <- do.call(rbind, mget(x))
x2 <- rbind(ft_res4,x1)
x3 <- lapply(x2, function(x) ifelse(x=="NULL", NA, x))
x4 <- lapply(x3, function(x) as.character((unlist(x))))
x5 <- as.data.frame(do.call(cbind, x4))
return(x5)
}
house_enacted_115 <- getBills(api_key,"115","house","enacted",1,20)
build()
build()
devtools::install_github("rstudio/rmarkdown")
build()
install.package("rmarkdown")
install.package("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
build()
library(devtools)
library(httr)
library(dplyr)
library(stringr)
library(roxygen2)
document()
build()
pandoc_version()
Sys.getenv("api_key")
Sys.setenv("api_key", "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe")
build()
Sys.setenv(key = "jkbsSf26e2TgcM0esDX9MUfxTDn05nT7u8c5uTMe")
key = Sys.getenv(key)
key <- Sys.getenv('key')
str(key)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(httr)
library(dplyr)
library(stringr)
apikey = Sys.getenv('key')
house_enacted_115 <- getBills(key=apikey,"115","house","enacted",1,20)
build()
apikey = Sys.getenv('key')
apikey
apikey = as.character(Sys.getenv('key'))
apikey
apikey <- as.character(Sys.getenv('key'))
apikey
as.character(apikey)
as.vector(apikey)
unlist(apikey)
str(apikey)
value(apikey)
as.data.frame(apikey)
blah <- as.data.frame(apikey)
blah$apikey
apikey <- as.data.frame((Sys.getenv('key')))
house_enacted_115 <- getBills(apikey$apikey,"115","house","enacted",1,20)
apikey <- as.data.frame((Sys.getenv('key')))
house_enacted_115 <- getBills(apikey$apikey,"115","house","enacted",1,20)
apikey <- as.data.frame((Sys.getenv('key')))
house_enacted_115 <- getBills(apikey,"115","house","enacted",1,20)
apikey <- (Sys.getenv('key'))
house_enacted_115 <- getBills(apikey,"115","house","enacted",1,20)
build()
apikey
